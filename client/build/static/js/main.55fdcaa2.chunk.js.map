{"version":3,"sources":["components/Calendar/index.js","pages/Livecalpage.js","App.js","serviceWorker.js","index.js"],"names":["CalApp","calendarComponentRef","React","createRef","state","calendarSelectable","calendarWeekends","calendarEvents","title","start","Date","end","date","handleSelect","arg","_this","setState","concat","console","log","react_default","a","createElement","className","main_esm","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","selectable","this","header","left","center","right","defaultView","ref","weekends","events","select","Component","Calendar","Calendar_CalApp","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iXAWqBA,oNACpBC,qBAAuBC,IAAMC,cAC7BC,MAAQ,CACPC,oBAAoB,EACpBC,kBAAkB,EAClBC,eAAgB,CAEf,CACCC,MAAO,UACPC,MAAO,IAAIC,KACXC,IAAK,IAAID,MAEV,CACCF,MAAO,UACPI,KAAM,cAEP,CACCJ,MAAO,UACPI,KAAM,kBAiCTC,aAAe,SAAAC,GACdC,EAAKC,SAAS,CAEbT,eAAgBQ,EAAKX,MAAMG,eAAeU,OAAO,CAEhDT,MAAO,YACPC,MAAOK,EAAIL,MACXE,IAAKG,EAAIH,QAIXO,QAAQC,IAAIL,4EAtCZ,OACCM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,yCAKAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACCC,QAAS,CAACC,IAAeC,IAAgBC,KACzCC,WAAYC,KAAK1B,MAAMC,mBACvB0B,OAAQ,CACPC,KAAM,kBACNC,OAAM,2BACNC,MAAO,kDAERC,YAAY,eACZC,IAAKN,KAAK7B,qBACVoC,SAAUP,KAAK1B,MAAME,iBACrBgC,OAAQR,KAAK1B,MAAMG,eACnBgC,OAAQT,KAAKjB,wBA5CiBX,IAAMsC,YCU3BC,mLAbX,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoB,EAAD,eARaF,aCkBRG,MAff,WACE,OACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KAGEzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWP,QCH/BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.55fdcaa2.chunk.js","sourcesContent":["import React from \"react\";\n\n// @fullcalendar/react @fullcalendar/interaction @fullcalendar/daygrid @fullcalendar/moment @fullcalendar/timegrid\nimport FullCalendar from \"@fullcalendar/react\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\n// import momentPlugin from '@fullcalendar/moment';\n\nimport \"./cal.scss\";\n\nexport default class CalApp extends React.Component {\n\tcalendarComponentRef = React.createRef();\n\tstate = {\n\t\tcalendarSelectable: true,\n\t\tcalendarWeekends: true,\n\t\tcalendarEvents: [\n\t\t\t// initial event data\n\t\t\t{\n\t\t\t\ttitle: \"event 0\",\n\t\t\t\tstart: new Date(),\n\t\t\t\tend: new Date()\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"event 1\",\n\t\t\t\tdate: \"2019-05-01\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"event 2\",\n\t\t\t\tdate: \"2019-05-02\"\n\t\t\t}\n\t\t]\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='cal-app'>\n\t\t\t\t<div className='cal-app-top'>\n\t\t\t\t\t{/* <button onClick={ this.toggleWeekends }>toggle weekends</button>&nbsp; */}\n\t\t\t\t\t{/* <button onClick={ this.gotoPast }>go to a date in the past</button>&nbsp; */}\n\t\t\t\t\t(click a date / time to add an event)\n\t\t\t\t</div>\n\t\t\t\t<div className='cal-app-calendar'>\n\t\t\t\t\t<FullCalendar\n\t\t\t\t\t\tplugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n\t\t\t\t\t\tselectable={this.state.calendarSelectable}\n\t\t\t\t\t\theader={{\n\t\t\t\t\t\t\tleft: \"prev,next today\",\n\t\t\t\t\t\t\tcenter: `What's your availability`,\n\t\t\t\t\t\t\tright: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdefaultView='timeGridWeek'\n\t\t\t\t\t\tref={this.calendarComponentRef}\n\t\t\t\t\t\tweekends={this.state.calendarWeekends}\n\t\t\t\t\t\tevents={this.state.calendarEvents}\n\t\t\t\t\t\tselect={this.handleSelect}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\thandleSelect = arg => {\n\t\tthis.setState({\n\t\t\t// add new event data\n\t\t\tcalendarEvents: this.state.calendarEvents.concat({\n\t\t\t\t// creates a new array\n\t\t\t\ttitle: \"New Event\",\n\t\t\t\tstart: arg.start,\n\t\t\t\tend: arg.end\n\t\t\t\t// editable: true\n\t\t\t})\n\t\t});\n\t\tconsole.log(arg);\n\t};\n}\n","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport CalApp from \"../components/Calendar\";\n\nclass Calendar extends Component {\n\n  render() {\n    return (\n      <div>\n        <h1>Align Your Calendar</h1>\n        <br />\n        <div>\n          <CalApp />\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default Calendar;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Calendar from \"./pages/Livecalpage\";\n// import Home from \"\";\n// import Home from \"\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          {/* <Route exact path=\"/\" component={Home} /> */}\n          {/* <Route exact path=\"/info\" component={Info} /> */}\n          <Route exact path='/calendar' component={Calendar} />\n          {/* <Route exact path=\"/calendar/:id\" component={CalApp} /> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}